代码仓库地址：https://bgithub.xyz/DDBirdd/--rtos
需求分析：轻量级确定性低时延的实时可抢占多任务操作系统
 1.项目背景
随着嵌入式系统、物联网设备和实时计算场景的快速发展，传统操作系统的任务调度开销、内存管理效率以及通信延迟等问题逐渐成为性能瓶颈。为了满足高实时性、低延迟和高可靠性的需求，开发一套轻量级的操作系统（OS）机制势在必行。该操作系统需在保证传统OS功能的基础上，显著降低任务调度开销、提升内存管理效率、优化通信性能，并支持快速用户态中断能力。

 2. 功能需求
2.1 调度管理子系统
功能描述：
  - 实现轻量级的任务调度机制，支持任务的创建、销毁、放权等传统线程管理语义。
  - 支持抢占式调度能力，确保高优先级任务能够及时抢占低优先级任务。
  - 调度开销需显著降低，目标是在相同硬件条件下，相比传统操作系统（如Linux）的调度性能提升20%。
设计目标：
  - 提供用户友好的任务管理接口（如`task_create`、`task_destroy`、`task_yield`等）。
  - 确保调度器的实时性，任务切换延迟控制在微秒级。

2.2 内存管理子系统
功能描述：
  - 实现轻量级的内存管理机制，支持内存的申请、释放及相关调试（DFX）功能。
  - 提供多任务的地址空间隔离能力，确保任务间的内存访问互不干扰。
  - 内存管理性能需显著提升，目标是在相同硬件条件下，相比传统Linux内存管理算法性能提升10%~20%。
设计目标：
  - 提供高效的内存分配和释放接口（如`mem_alloc`、`mem_free`）。
  - 支持内存使用情况的监控和调试功能（如内存泄漏检测、碎片整理）。

2.3 通信管理子系统
功能描述：
  - 实现轻量级的进程间通信（IPC）和远程过程调用（RPC）机制。
  - 提供高效的通信接口，支持任务间的数据交换和同步。
  - 通信性能需显著提升，目标是在相同硬件条件下，相比传统Linux的IPC/RPC性能提升10%~20%。
设计目标：
  - 提供用户友好的通信接口（如`ipc_send`、`ipc_receive`、`rpc_call`等）。
  - 确保通信延迟低且稳定，满足实时性要求。
2.4 用户态中断机制
功能描述：
  - 实现快速的用户态中断上报能力，支持低延迟的中断处理。
  - 中断延迟需控制在5微秒（us）以内，确保高实时性任务的响应能力。
设计目标：
  - 提供用户态中断注册和处理接口（如`register_interrupt`、`handle_interrupt`）。
  - 确保中断处理的确定性和低延迟。

3.非功能需求
3.1 性能需求
- 调度开销降低20%，任务切换延迟控制在微秒级。
- 内存管理性能提升10%~20%，内存分配和释放效率显著提高。
- 通信性能提升10%~20%，IPC/RPC延迟显著降低。
- 用户态中断延迟小于5微秒。

  3.2 可靠性需求
- 系统需具备高可靠性，确保在长时间运行中不出现内存泄漏、死锁等问题。
- 支持多任务的地址空间隔离，防止任务间的内存访问冲突。

  3.3 可扩展性需求
- 系统设计需具备良好的可扩展性，支持后续功能模块的添加和优化。
- 提供清晰的接口和文档，便于开发者扩展和维护。

3.4 兼容性需求
- 系统需兼容常见的硬件平台（如ARM、x86等）。
- 提供与传统操作系统（如Linux）相似的用户接口，降低开发者的学习成本。

4.设计目标
- 轻量化：通过优化调度、内存管理和通信机制，显著降低系统开销。
- 低延迟：确保任务调度、中断处理和通信的延迟控制在微秒级。
- 高实时性：支持抢占式调度和快速中断处理，满足实时计算场景的需求。
- 易用性：提供用户友好的接口和文档，降低开发者的使用门槛。
- 高性能：在相同硬件条件下，性能相比传统操作系统提升10%~20%。


